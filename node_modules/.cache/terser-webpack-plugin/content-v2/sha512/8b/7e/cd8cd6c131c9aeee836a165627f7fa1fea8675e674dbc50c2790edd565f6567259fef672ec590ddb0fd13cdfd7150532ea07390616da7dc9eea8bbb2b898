{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{359:function(e,t,o){\"use strict\";o.r(t);var r=o(43),a=Object(r.a)({},(function(){var e=this,t=e.$createElement,o=e._self._c||t;return o(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":e.$parent.slotKey}},[o(\"h1\",{attrs:{id:\"backend\"}},[o(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#backend\"}},[e._v(\"#\")]),e._v(\" Backend\")]),e._v(\" \"),o(\"h2\",{attrs:{id:\"controllers\"}},[o(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#controllers\"}},[e._v(\"#\")]),e._v(\" Controllers\")]),e._v(\" \"),o(\"p\",[e._v(\"All of the controllers live in the default Laravel controller location of app\\\\Http\\\\Controllers and follow a namespacing convention of the folders they're in.\")]),e._v(\" \"),o(\"h4\",{attrs:{id:\"backend-auth-role-rolecontroller\"}},[o(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#backend-auth-role-rolecontroller\"}},[e._v(\"#\")]),e._v(\" Backend/Auth/Role/RoleController\")]),e._v(\" \"),o(\"p\",[o(\"em\",[e._v(\"This controller return response from \"),o(\"code\",[e._v(\"index()\")]),e._v(\" method with all existing roles.\\n\"),o(\"code\",[e._v(\"create()\")]),e._v(\" method return view for creating new role, with all permissions (if are created).\\n\"),o(\"code\",[e._v(\"store()\")]),e._v(\" method insert data to associated tables.\\n\"),o(\"code\",[e._v(\"edit()\")]),e._v(\" to hit that method user need to be admin or has permissions to edit Roles & Permissions. Method return view with the role data you like to edit.\")])]),e._v(\" \"),o(\"h4\",{attrs:{id:\"backend-auth-user-userpasswordcontroller\"}},[o(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#backend-auth-user-userpasswordcontroller\"}},[e._v(\"#\")]),e._v(\" Backend/Auth/User/UserPasswordController\")]),e._v(\" \"),o(\"p\",[o(\"em\",[e._v(\"This controller return a view with edit method with the given user. In the \"),o(\"code\",[e._v(\"update()\")]),e._v(\" method we updating the user password calling the metod \"),o(\"code\",[e._v(\"updatePassword()\")]),e._v(\" from \"),o(\"code\",[e._v(\"userRepository\")]),e._v(\" and redirect back to users page.\")])]),e._v(\" \"),o(\"h4\",{attrs:{id:\"backend-auth-user-usersessioncontroller\"}},[o(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#backend-auth-user-usersessioncontroller\"}},[e._v(\"#\")]),e._v(\" Backend/Auth/User/UserSessionController\")]),e._v(\" \"),o(\"p\",[o(\"em\",[e._v(\"Here we are using method \"),o(\"code\",[e._v(\"clearSession()\")]),e._v(\" to logout user from the session or in another words delete the session\")])]),e._v(\" \"),o(\"h4\",{attrs:{id:\"backend-auth-user-userstatuscontroller\"}},[o(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#backend-auth-user-userstatuscontroller\"}},[e._v(\"#\")]),e._v(\" Backend/Auth/User/UserStatusController\")]),e._v(\" \"),o(\"p\",[o(\"em\",[e._v(\"In this controller is the logic for get Deactivated or Deleted users and managing the status of the user, marking as deactivated or delete the user.\")])]),e._v(\" \"),o(\"h4\",{attrs:{id:\"backend-auth-user-usercontroller\"}},[o(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#backend-auth-user-usercontroller\"}},[e._v(\"#\")]),e._v(\" Backend/Auth/User/UserController\")]),e._v(\" \"),o(\"p\",[o(\"em\",[e._v(\"This controller return view and response from \"),o(\"code\",[e._v(\"index()\")]),e._v(\" method with all existing users.\\n\"),o(\"code\",[e._v(\"create()\")]),e._v(\" method return view for creating new user, with all roles & permissions (if are created).\\n\"),o(\"code\",[e._v(\"store()\")]),e._v(\" method insert data to associated tables.\")])]),e._v(\" \"),o(\"h4\",{attrs:{id:\"categorycontroller\"}},[o(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#categorycontroller\"}},[e._v(\"#\")]),e._v(\" CategoryController\")]),e._v(\" \"),o(\"p\",[o(\"em\",[e._v(\"This controller return response from \"),o(\"code\",[e._v(\"index()\")]),e._v(\" method with all existing categories needed for categories component inside Categories & Tags menu page. Also it has a logic for inserting, updating and deleting category and returning response with created, edited or deleted category(-ies). We are passing the \"),o(\"code\",[e._v(\"$request\")]),e._v(\" and \"),o(\"code\",[e._v(\"$category\")]),e._v(\" model.\\n\"),o(\"code\",[e._v(\"store()\")]),e._v(\", \"),o(\"code\",[e._v(\"update()\")]),e._v(\" and \"),o(\"code\",[e._v(\"destroy()\")]),e._v(\" methods return json response with the \"),o(\"code\",[e._v(\"id\")]),e._v(\" and \"),o(\"code\",[e._v(\"name\")]),e._v(\" of created, updated or deleted category(-ies).\")])]),e._v(\" \"),o(\"h4\",{attrs:{id:\"chartcontroller\"}},[o(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#chartcontroller\"}},[e._v(\"#\")]),e._v(\" ChartController\")]),e._v(\" \"),o(\"p\",[o(\"em\",[e._v(\"This controller has logic for building \"),o(\"code\",[e._v(\"api\")]),e._v(\" for \"),o(\"code\",[e._v(\"axios\")]),e._v(\" calls from chart components that are shown at Dashboard page. The \"),o(\"code\",[e._v(\"api\")]),e._v(\" responses are modified to return proper data object structure as needed for frontend charts components.\")])]),e._v(\" \"),o(\"h4\",{attrs:{id:\"clientcontroller\"}},[o(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#clientcontroller\"}},[e._v(\"#\")]),e._v(\" ClientController\")]),e._v(\" \"),o(\"p\",[o(\"em\",[e._v(\"In this controller has logic for listing and managing clients data.\")])]),e._v(\" \"),o(\"ul\",[o(\"li\",[o(\"em\",[o(\"code\",[e._v(\"index()\")]),e._v(\" method return index.blade.php view inside \"),o(\"code\",[e._v(\"backend/auth/client/\")]),e._v(\" with needed variables data.\")])]),e._v(\" \"),o(\"li\",[o(\"em\",[o(\"code\",[e._v(\"management()\")]),e._v(\" method return management.blade.php view inside \"),o(\"code\",[e._v(\"backend/auth/client/\")]),e._v(\" with needed variables data.\")])]),e._v(\" \"),o(\"li\",[o(\"em\",[o(\"code\",[e._v(\"filterClients()\")]),e._v(\" building the query logic for filtering the data depending on user interaction. Some of the data(request) send from filters inputs/selects come as array.\")])]),e._v(\" \"),o(\"li\",[o(\"em\",[o(\"code\",[e._v(\"categoryTag()\")]),e._v(\" return json response with existing categories and tags needed\")])]),e._v(\" \"),o(\"li\",[o(\"em\",[o(\"code\",[e._v(\"update()\")]),e._v(\" method is called when user change client data information. Inside has a validation logic with \"),o(\"code\",[e._v(\"validateClient()\")]),e._v(\" method. With \"),o(\"code\",[e._v(\"sync(Array :id)\")]),e._v(\" method at the end we attach/update categories or tags for client passing an array of id's\")])]),e._v(\" \"),o(\"li\",[o(\"em\",[o(\"code\",[e._v(\"validateClient()\")]),e._v(\" method has validation rules for request(ed) fields that user try to update.\")])])]),e._v(\" \"),o(\"h4\",{attrs:{id:\"tagcontroller\"}},[o(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#tagcontroller\"}},[e._v(\"#\")]),e._v(\" TagController\")]),e._v(\" \"),o(\"p\",[o(\"em\",[e._v(\"This controller return response from \"),o(\"code\",[e._v(\"index()\")]),e._v(\" method with all existing tags needed for tags component inside Categories & Tags menu page. Also it has a logic for inserting, updating and deleting tag and returning response with created, edited or deleted tag(s).\\n\"),o(\"code\",[e._v(\"store()\")]),e._v(\", \"),o(\"code\",[e._v(\"update()\")]),e._v(\" and \"),o(\"code\",[e._v(\"destroy()\")]),e._v(\" methods return json response with the \"),o(\"code\",[e._v(\"id\")]),e._v(\" and \"),o(\"code\",[e._v(\"name\")]),e._v(\" of created, updated or deleted tag(s).\")])]),e._v(\" \"),o(\"h4\",{attrs:{id:\"logincontroller\"}},[o(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#logincontroller\"}},[e._v(\"#\")]),e._v(\" LoginController\")]),e._v(\" \"),o(\"p\",[o(\"em\",[e._v(\"Has essentiall logic needed to show the login form, validate login fields, check if user is confirmed and logout method.\")])]),e._v(\" \"),o(\"h2\",{attrs:{id:\"models\"}},[o(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#models\"}},[e._v(\"#\")]),e._v(\" Models\")]),e._v(\" \"),o(\"ul\",[o(\"li\",[o(\"p\",[o(\"strong\",[e._v(\"Category\")]),e._v(\" \"),o(\"em\",[o(\"code\",[e._v(\"clients()\")]),e._v(\" method define belongsToMany relationship with model Client\")])])]),e._v(\" \"),o(\"li\",[o(\"p\",[o(\"strong\",[e._v(\"Client\")])]),e._v(\" \"),o(\"ul\",[o(\"li\",[o(\"em\",[o(\"code\",[e._v(\"clientInfo()\")]),e._v(\" method define hasOne relationship with model ClientInfo\")])]),e._v(\" \"),o(\"li\",[o(\"em\",[o(\"code\",[e._v(\"clientDetail()\")]),e._v(\" method define hasOne relationship with model ClientDetail\")])]),e._v(\" \"),o(\"li\",[o(\"em\",[o(\"code\",[e._v(\"tags()\")]),e._v(\" method define belongsToMany relationship with model Tag\")])]),e._v(\" \"),o(\"li\",[o(\"em\",[o(\"code\",[e._v(\"categories()\")]),e._v(\" method define belongsToMany relationship with model Category\")])])])]),e._v(\" \"),o(\"li\",[o(\"p\",[o(\"strong\",[e._v(\"ClientDetail\")]),e._v(\" \"),o(\"em\",[o(\"code\",[e._v(\"client()\")]),e._v(\" method define belongsTo relationship with model Client\")])])]),e._v(\" \"),o(\"li\",[o(\"p\",[o(\"strong\",[e._v(\"ClientInfo\")]),e._v(\" \"),o(\"em\",[o(\"code\",[e._v(\"client()\")]),e._v(\" method define belongsTo relationship with model Client\")])])]),e._v(\" \"),o(\"li\",[o(\"p\",[o(\"strong\",[e._v(\"Tag\")]),e._v(\" \"),o(\"em\",[o(\"code\",[e._v(\"clients()\")]),e._v(\" method define belongsToMany relationship with model Client\")])])])])])}),[],!1,null,null,null);t.default=a.exports}}]);","extractedComments":[]}
{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{371:function(e,t,n){\"use strict\";n.r(t);var o=n(43),s=Object(o.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":e.$parent.slotKey}},[n(\"h1\",{attrs:{id:\"routes\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#routes\"}},[e._v(\"#\")]),e._v(\" Routes\")]),e._v(\" \"),n(\"p\",[e._v(\"The only stock route file modified is routes\\\\web.php\")]),e._v(\" \"),n(\"p\",[e._v(\"Lets look at web.php, line by line:\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",[n(\"code\",[e._v(\"Route::get('lang/{lang}', 'LanguageController@swap');\\n\")])])]),n(\"p\",[e._v(\"The first line gets envoked anytime the user chooses a language from the language picker dropdown. The LanguageController's swap method switches the language code in the session and refreshes the page for it to take effect.\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",[n(\"code\",[e._v(\"Route::group(['namespace' => 'Frontend', 'as' => 'frontend.'], function () {\\n\\tincludeRouteFiles(__DIR__ . '/frontend/');\\n});\\n\")])])]),n(\"ul\",[n(\"li\",[e._v(\"This section registers all of the frontend routes, such as login, register, etc.\")]),e._v(\" \"),n(\"li\",[e._v(\"The namespaces of the routes indicate the folder structure. In the above case the routes that will be included live in routes\\\\frontend.\")]),e._v(\" \"),n(\"li\",[e._v(\"The as property prepends the value to all routes inside the closure, so in the above case all included route names will be prepended with frontend.\")]),e._v(\" \"),n(\"li\",[e._v(\"The \"),n(\"code\",[e._v(\"includeRouteFiles()\")]),e._v(\" is a helper function located in app\\\\helpers.php and autoloaded by composer.\")])]),e._v(\" \"),n(\"p\",[e._v(\"This takes all files in the specified directory and includes them in the closure so you can add new routes without having to touch the web.php routes file.\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",[n(\"code\",[e._v(\"Route::group(['namespace' => 'Backend', 'prefix' => 'admin', 'as' => 'admin.', 'middleware' => 'admin'], function () {\\n\\tincludeRouteFiles(__DIR__ . '/backend/');\\n});\\n\")])])]),n(\"ul\",[n(\"li\",[e._v(\"This section registers all of the backend routes, such as admin dashboard, user management, etc.\")]),e._v(\" \"),n(\"li\",[e._v(\"It is nearly identical as the frontend routes with the addition of the admin middleware and prefix.\")]),e._v(\" \"),n(\"li\",[e._v(\"The namespaces of the routes indicate the folder structure. In the above case the routes that will be included live in routes\\\\backend.\")]),e._v(\" \"),n(\"li\",[e._v(\"The as property prepends the value to all routes inside the closure, so in the above case all included route names will be prepended with admin.\")]),e._v(\" \"),n(\"li\",[e._v(\"The prefix property prepends the value before all of the URL's of the routes inside the closure, so in the above case all route URL's will be prepended with admin/.\")]),e._v(\" \"),n(\"li\",[e._v(\"The admin middleware is specified in app\\\\Http\\\\Kernel.php and states that anyone trying to access the routes in the following closure must:\\n\"),n(\"ul\",[n(\"li\",[n(\"em\",[e._v(\"Be logged in.\")])]),e._v(\" \"),n(\"li\",[n(\"em\",[e._v(\"Have the view-backend permission associated with one of their roles or by itself.\")])])])])]),e._v(\" \"),n(\"p\",[e._v(\"Note: Most route resources use Laravel's Route/Model Binding which you will see as well in the controller methods.\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",[n(\"code\",[e._v(\"// All route names are prefixed with 'admin.auth'.\\nRoute::group([\\n    'prefix' => 'auth',\\n    'as' => 'auth.',\\n    'namespace' => 'Auth',\\n    'middleware' => 'role:'.config('access.users.admin_role'),\\n], function () {\\n    // User Management\\n    Route::group(['namespace' => 'User'], function () {\\n        // User Status'\\n        Route::get('user/deactivated', [UserStatusController::class, 'getDeactivated'])->name('user.deactivated');\\n        Route::get('user/deleted', [UserStatusController::class, 'getDeleted'])->name('user.deleted');\\n\\n        // User CRUD\\n        Route::get('user', [UserController::class, 'index'])->name('user.index');\\n        Route::get('user/create', [UserController::class, 'create'])->name('user.create');\\n        Route::post('user', [UserController::class, 'store'])->name('user.store');\\n\\n        // Specific User\\n        Route::group(['prefix' => 'user/{user}'], function () {\\n            // User\\n            Route::get('/', [UserController::class, 'show'])->name('user.show');\\n            Route::get('edit', [UserController::class, 'edit'])->name('user.edit');\\n            Route::patch('/', [UserController::class, 'update'])->name('user.update');\\n            Route::delete('/', [UserController::class, 'destroy'])->name('user.destroy');\\n\\n            // Account\\n            Route::get('account/confirm/resend', [UserConfirmationController::class, 'sendConfirmationEmail'])->name('user.account.confirm.resend');\\n\\n            // Status\\n            Route::get('mark/{status}', [UserStatusController::class, 'mark'])->name('user.mark')->where(['status' => '[0,1]']);\\n\\n            // Social\\n            Route::delete('social/{social}/unlink', [UserSocialController::class, 'unlink'])->name('user.social.unlink');\\n\\n            // Confirmation\\n            Route::get('confirm', [UserConfirmationController::class, 'confirm'])->name('user.confirm');\\n            Route::get('unconfirm', [UserConfirmationController::class, 'unconfirm'])->name('user.unconfirm');\\n\\n            // Password\\n            Route::get('password/change', [UserPasswordController::class, 'edit'])->name('user.change-password');\\n            Route::patch('password/change', [UserPasswordController::class, 'update'])->name('user.change-password.post');\\n\\n            // Session\\n            Route::get('clear-session', [UserSessionController::class, 'clearSession'])->name('user.clear-session');\\n\\n            // Deleted\\n            Route::get('delete', [UserStatusController::class, 'delete'])->name('user.delete-permanently');\\n            Route::get('restore', [UserStatusController::class, 'restore'])->name('user.restore');\\n        });\\n    });\\n\\n    // Role Management\\n    Route::group(['namespace' => 'Role'], function () {\\n        Route::get('role', [RoleController::class, 'index'])->name('role.index');\\n        Route::get('role/create', [RoleController::class, 'create'])->name('role.create');\\n        Route::post('role', [RoleController::class, 'store'])->name('role.store');\\n\\n        Route::group(['prefix' => 'role/{role}'], function () {\\n            Route::get('edit', [RoleController::class, 'edit'])->name('role.edit');\\n            Route::patch('/', [RoleController::class, 'update'])->name('role.update');\\n            Route::delete('/', [RoleController::class, 'destroy'])->name('role.destroy');\\n        });\\n    });\\n});\\n\")])])]),n(\"hr\"),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",[n(\"code\",[e._v(\"/*\\n * Frontend Access Controllers\\n * All route names are prefixed with 'frontend.auth'.\\n */\\nRoute::group(['namespace' => 'Auth', 'as' => 'auth.'], function () {\\n    // These routes require the user to be logged in\\n    Route::group(['middleware' => 'auth'], function () {\\n        Route::get('logout', [LoginController::class, 'logout'])->name('logout');\\n\\n        // These routes can not be hit if the password is expired\\n        Route::group(['middleware' => 'password_expires'], function () {\\n            // Change Password Routes\\n            Route::patch('password/update', [UpdatePasswordController::class, 'update'])->name('password.update');\\n        });\\n\\n        // Password expired routes\\n        Route::get('password/expired', [PasswordExpiredController::class, 'expired'])->name('password.expired');\\n        Route::patch('password/expired', [PasswordExpiredController::class, 'update'])->name('password.expired.update');\\n    });\\n\\n    // These routes require no user to be logged in\\n    Route::group(['middleware' => 'guest'], function () {\\n        // Authentication Routes\\n        Route::get('login', [LoginController::class, 'showLoginForm'])->name('login');\\n        Route::post('login', [LoginController::class, 'login'])->name('login.post');\\n\\n        // Socialite Routes\\n        Route::get('login/{provider}', [SocialLoginController::class, 'login'])->name('social.login');\\n        Route::get('login/{provider}/callback', [SocialLoginController::class, 'login']);\\n\\n        // Registration Routes\\n        Route::get('register', [RegisterController::class, 'showRegistrationForm'])->name('register');\\n        Route::post('register', [RegisterController::class, 'register'])->name('register.post');\\n\\n        // Confirm Account Routes\\n        Route::get('account/confirm/{token}', [ConfirmAccountController::class, 'confirm'])->name('account.confirm');\\n        Route::get('account/confirm/resend/{uuid}', [ConfirmAccountController::class, 'sendConfirmationEmail'])->name('account.confirm.resend');\\n\\n        // Password Reset Routes\\n        Route::get('password/reset', [ForgotPasswordController::class, 'showLinkRequestForm'])->name('password.email');\\n        Route::post('password/email', [ForgotPasswordController::class, 'sendResetLinkEmail'])->name('password.email.post');\\n\\n        Route::get('password/reset/{token}', [ResetPasswordController::class, 'showResetForm'])->name('password.reset.form');\\n        Route::post('password/reset', [ResetPasswordController::class, 'reset'])->name('password.reset');\\n    });\\n});\\n\")])])]),n(\"hr\"),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",[n(\"code\",[e._v(\"// Client Management - with needed permissions\\nRoute::group(['middleware' => 'role:'.config('access.users.admin_role')], function () {\\n\\n    // Client CRUD \\n    Route::get('clients-management', [ClientController::class, 'management'])->name('clients-management.index');\\n    Route::patch('clients/{client}', 'ClientController@update')->name('update');\\n    Route::post('categoryTag', [ClientController::class, 'categoryTag'])->name('clients.categoryTag');\\n\\n    // Categories & Tags Management\\n    Route::get('categories-tags', function () {\\n        return view('backend/categories-tags');\\n    })->name('categories-tags.index');\\n\\n    // Categories\\n    Route::get('api/categories', [CategoryController::class, 'index'])->name('api/categories.index');\\n    Route::post('api/categories', [CategoryController::class, 'store'])->name('api/categories.store');\\n    Route::patch('api/update/categories', [CategoryController::class, 'update'])->name('api/categories.update');\\n    Route::delete('api/categories/{category}', [CategoryController::class, 'destroy'])->name('api/categories.destroy');\\n\\n    // Tags\\n    Route::get('api/tags', [TagController::class, 'index'])->name('api/tags.index');\\n    Route::post('api/tags', [TagController::class, 'store'])->name('api/tags.store');\\n    Route::patch('api/update/tags', [TagController::class, 'update'])->name('api/tags.update');\\n    Route::delete('api/tags/{tag}', [TagController::class, 'destroy'])->name('api/tags.destroy');\\n});\\n\")])])]),n(\"p\",[e._v(\"This section registers routes, such as cient management, route for updating the client info, getting the categories and tags after updating client info, route for categories & tags view and routes for CRUD for both etc.\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",[n(\"code\",[e._v(\"Route::group(['middleware' => 'auth'], function () {\\n\\n    // Client CRUD\\n    Route::get('clients', [ClientController::class, 'index'])->name('clients.index');\\n    Route::get('filter-clients', [ClientController::class, 'filterClients'])->name('clients.filterClients');\\n\\n    /* Charts APi */\\n    Route::get('admin/api/city', 'ChartController@clientsByCity');\\n    Route::get('admin/api/gender', 'ChartController@clientsByGender');\\n    Route::get('admin/api/top-ten', 'ChartController@topTen');\\n    Route::get('admin/api/age', 'ChartController@clientsByAge');\\n\\tRoute::get('admin/api/estimate', 'ChartController@estimateByCategory');\\n});\\n\")])])]),n(\"p\",[e._v(\"This section registers routes, such as route for view/list cients, route for filter the clients data, and routes for axios reguests from Chart components shown on Dashboard page.\")])])}),[],!1,null,null,null);t.default=s.exports}}]);","extractedComments":[]}